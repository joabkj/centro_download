unit util.download;

interface

uses
  Classes, IdBaseComponent, IdComponent, IdTCPConnection, IdTCPClient, IdHTTP,
  IdSSLOpenSSL, Math;

{$M+}

type
  TIdHTTPProgress = class(TIdHTTP)
  private
    FProgress: Integer;
    FBytesToTransfer: Int64;
    FOnChange: TNotifyEvent;
    IOHndl: TIdSSLIOHandlerSocketOpenSSL;
    FPausar: Boolean;
    FTamanhoArquivo: Int64;
    FBaixado       : Int64;
    FConcluido     : Int64;
    procedure HTTPWorkBegin(ASender: TObject; AWorkMode: TWorkMode; AWorkCountMax: Int64);
    procedure HTTPWork(ASender: TObject; AWorkMode: TWorkMode; AWorkCount: Int64);
    procedure HTTPWorkEnd(Sender: TObject; AWorkMode: TWorkMode);
    procedure SetProgress(const Value: Integer);
    procedure SetOnChange(const Value: TNotifyEvent);
  public
    constructor Create(AOwner: TComponent);
    procedure DownloadFile(const aFileUrl: string; const aDestinationFile: String);
  published
    property Progress: Integer read FProgress write SetProgress;
    property BytesToTransfer: Int64 read FBytesToTransfer;
    property OnChange: TNotifyEvent read FOnChange write SetOnChange;
  end;

implementation

uses
  Sysutils;

{ TIdHTTPProgress }

constructor TIdHTTPProgress.Create(AOwner: TComponent);
begin
  inherited;
  IOHndl := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  Request.BasicAuthentication := True;
  Request.Accept := 'text/html, */*';
//  Request.UserAgent := 'Mozilla/5.0 (compatible; JD Thread Demo)';
  Request.ContentType := 'application/x-www-form-urlencoded';
  Request.UserAgent := 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; GTB5; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; Maxthon; InfoPath.1; .NET CLR 3.5.30729; .NET CLR 3.0.30618)';
  HandleRedirects := True;
  IOHandler := IOHndl;
  ReadTimeout := 30000;
  IOHndl.SSLOptions.SSLVersions := [sslvTLSv1, sslvTLSv1_1, sslvTLSv1_2];

  {$IFDEF FPC}
  OnWork := @HTTPWork;
  OnWorkBegin := @HTTPWorkBegin;
  OnWorkEnd := @HTTPWorkEnd;
  {$ELSE}
  OnWork := HTTPWork;
  OnWorkBegin := HTTPWorkBegin;
  OnWorkEnd := HTTPWorkEnd;
  {$ENDIF}
end;

procedure TIdHTTPProgress.DownloadFile(const aFileUrl: string; const aDestinationFile: String);
var
  aPath: String;
  Terminado: Boolean;
  fFileStream: TFileStream;
begin
  Progress := 0;
  FBytesToTransfer := 0;
  aPath := ExtractFilePath(aDestinationFile);
  if aPath <> '' then
    ForceDirectories(aPath);
  try
    try
      Head(aFileUrl);
      FTamanhoArquivo := Response.ContentLength;
      terminado:= False;
      repeat
        if FPausar then
          Free;

        begin
          fFileStream := TFileStream.Create(aFileUrl, fmOpenReadWrite);
          Terminado   := fFileStream.Size >= FTamanhoArquivo;
          FBaixado    := fFileStream.Size;
          if not Terminado then
            fFileStream.Seek(Max(0, fFileStream.Size-4096), soFromBeginning);
        end;
        try
          FConcluido:= fFileStream.Size + 50000;
          if FConcluido < FTamanhoArquivo then begin
             Request.Range := IntToStr(fFileStream.Position) + '-'+  IntToStr(FConcluido);
          end
          else begin
            Request.Range := IntToStr(fFileStream.Position) + '-';
            terminado:=true;
          end;
          Get(aFileUrl, fFileStream);
        finally
          fFileStream.Free;
        end;
     until terminado; //Até que a variável Exit seja true (veja variavel exit acima)
       Disconnect;
    except
      on E : Exception do
      Begin
       //AddLog(E.Message);  //Você pode criar uma rotina de arquivo.log e colocar os erros
      end;
    end;
  finally

  end;


//  Progress := 0;
//  FBytesToTransfer := 0;
//  aPath := ExtractFilePath(aDestinationFile);
//  if aPath <> '' then
//    ForceDirectories(aPath);
//
//  Get(aFileUrl, ADestStream);

end;

procedure TIdHTTPProgress.HTTPWork(ASender: TObject; AWorkMode: TWorkMode; AWorkCount: Int64);
begin
  if BytesToTransfer = 0 then // No Update File
    Exit;

  Progress := Round((AWorkCount / BytesToTransfer) * 100);
end;

procedure TIdHTTPProgress.HTTPWorkBegin(ASender: TObject; AWorkMode: TWorkMode; AWorkCountMax: Int64);
begin
  FBytesToTransfer := AWorkCountMax;
end;

procedure TIdHTTPProgress.HTTPWorkEnd(Sender: TObject; AWorkMode: TWorkMode);
begin
  FBytesToTransfer := 0;
  Progress := 100;
end;

procedure TIdHTTPProgress.SetOnChange(const Value: TNotifyEvent);
begin
  FOnChange := Value;
end;

procedure TIdHTTPProgress.SetProgress(const Value: Integer);
begin
  FProgress := Value;
  if Assigned(FOnChange) then
    FOnChange(Self);
end;

end.

